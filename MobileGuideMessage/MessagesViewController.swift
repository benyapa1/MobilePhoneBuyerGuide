//
//  MessagesViewController.swift
//  MobileGuideMessage
//
//  Created by Papada Preedagorn on 11/11/2562 BE.
//  Copyright Â© 2562 SparePcland. All rights reserved.
//

import UIKit
import Messages
import Kingfisher

class MessagesViewController: MSMessagesAppViewController {
  
  @IBOutlet weak var appTableView: UITableView!
  var list: [String] = ["list1", "list2", "list3", "list4", "list5", "list6"]
  
  override func viewDidLoad() {
    super.viewDidLoad()
  }
  
  // MARK: - Conversation Handling
  
  override func willBecomeActive(with conversation: MSConversation) {
    // Called when the extension is about to move from the inactive to active state.
    // This will happen when the extension is about to present UI.
    
    // Use this method to configure the extension and restore previously stored state.
  }
  
  override func didResignActive(with conversation: MSConversation) {
    // Called when the extension is about to move from the active to inactive state.
    // This will happen when the user dissmises the extension, changes to a different
    // conversation or quits Messages.
    
    // Use this method to release shared resources, save user data, invalidate timers,
    // and store enough state information to restore your extension to its current state
    // in case it is terminated later.
  }
  
  override func didReceive(_ message: MSMessage, conversation: MSConversation) {
    // Called when a message arrives that was generated by another instance of this
    // extension on a remote device.
    
    // Use this method to trigger UI updates in response to the message.
  }
  
  override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
    // Called when the user taps the send button.
  }
  
  override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
    // Called when the user deletes the message without sending it.
    
    // Use this to clean up state related to the deleted message.
  }
  
  override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
    // Called before the extension transitions to a new presentation style.
    
    // Use this method to prepare for the change in presentation style.
  }
  
  override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
    // Called after the extension transitions to a new presentation style.
    
    // Use this method to finalize any behaviors associated with the change in presentation style.
  }
  
}

extension MessagesViewController: UITableViewDataSource {
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return list.count
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    guard let cell = appTableView.dequeueReusableCell(withIdentifier: "MessageTableViewCell", for: indexPath) as? messagesTableViewCell else {
      return UITableViewCell()
    }
    cell.updateUI(text: list[indexPath.row])
    return cell
  }
}

extension MessagesViewController: UITableViewDelegate {
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    _ = [appTableView.deselectRow(at: indexPath, animated: true)]
    
    //Collapse recipes view if it's expanded
    if (self.presentationStyle == .expanded) {
      self.requestPresentationStyle(.compact)
    }
    
    //Layout for message
    let layout = MSMessageTemplateLayout()
    let stringURL = "https://dmtopolog.com/images-posts/2019-02-05-ios-app-extensions-data-sharing/containing-app-host-app.png"
    let url = URL(string: stringURL)
    let data = try? Data(contentsOf: url!)
    layout.image = UIImage.init(data: data!)
    layout.caption = "\(self.list[indexPath.row]) - eiei"
    
    //The message itself
    let message = MSMessage()
    message.layout = layout
    
    //Send message to active conversation
    self.activeConversation?.insert(message, completionHandler: { (error) in
      if (error == nil) {
        print("Message sent")
      } else {
        print("Error!")
      }
    })
  }
}
